---
api_version: v1.0
kind: workload/job
metadata:
  project_name: my-project
  rancher_url: https://ui.rancher.server
  access_key: token-12345
  secret_key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  token_key: token-12345:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  cluster_id: j-4444
spec:
  ActiveDeadlineSeconds: *int64                 `json:"activeDeadlineSeconds,omitempty" yaml:"activeDeadlineSeconds,omitempty"`
  Annotations: map[string]string      `json:"annotations,omitempty" yaml:"annotations,omitempty"`
  AutomountServiceAccountToken: *bool                  `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty"`
  Containers: []Container            `json:"containers,omitempty" yaml:"containers,omitempty"`
  Created: string                 `json:"created,omitempty" yaml:"created,omitempty"`
  CreatorID: string                 `json:"creatorId,omitempty" yaml:"creatorId,omitempty"`
  DNSConfig: *PodDNSConfig          `json:"dnsConfig,omitempty" yaml:"dnsConfig,omitempty"`
  DNSPolicy: string                 `json:"dnsPolicy,omitempty" yaml:"dnsPolicy,omitempty"`
  Fsgid: *int64                 `json:"fsgid,omitempty" yaml:"fsgid,omitempty"`
  Gids: []int64                `json:"gids,omitempty" yaml:"gids,omitempty"`
  HostAliases: []HostAlias            `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty"`
  HostIPC: bool                   `json:"hostIPC,omitempty" yaml:"hostIPC,omitempty"`
  HostNetwork: bool                   `json:"hostNetwork,omitempty" yaml:"hostNetwork,omitempty"`
  HostPID: bool                   `json:"hostPID,omitempty" yaml:"hostPID,omitempty"`
  Hostname: string                 `json:"hostname,omitempty" yaml:"hostname,omitempty"`
  ImagePullSecrets: []LocalObjectReference `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty"`
  JobConfig: *JobConfig             `json:"jobConfig,omitempty" yaml:"jobConfig,omitempty"`
  JobStatus: *JobStatus             `json:"jobStatus,omitempty" yaml:"jobStatus,omitempty"`
  Labels: map[string]string      `json:"labels,omitempty" yaml:"labels,omitempty"`
  Name: string                 `json:"name,omitempty" yaml:"name,omitempty"`
  NamespaceId: string                 `json:"namespaceId,omitempty" yaml:"namespaceId,omitempty"`
  NodeID: string                 `json:"nodeId,omitempty" yaml:"nodeId,omitempty"`
  OwnerReferences: []OwnerReference       `json:"ownerReferences,omitempty" yaml:"ownerReferences,omitempty"`
  Priority: *int64                 `json:"priority,omitempty" yaml:"priority,omitempty"`
  PriorityClassName: string                 `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty"`
  ProjectID: string                 `json:"projectId,omitempty" yaml:"projectId,omitempty"`
  PublicEndpoints: []PublicEndpoint       `json:"publicEndpoints,omitempty" yaml:"publicEndpoints,omitempty"`
  ReadinessGates: []PodReadinessGate     `json:"readinessGates,omitempty" yaml:"readinessGates,omitempty"`
  Removed: string                 `json:"removed,omitempty" yaml:"removed,omitempty"`
  RestartPolicy: string                 `json:"restartPolicy,omitempty" yaml:"restartPolicy,omitempty"`
  RunAsGroup: *int64                 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty"`
  RunAsNonRoot: *bool                  `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty"`
  RuntimeClassName: string                 `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty"`
  SchedulerName: string                 `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty"`
  Scheduling: *Scheduling            `json:"scheduling,omitempty" yaml:"scheduling,omitempty"`
  Selector: *LabelSelector         `json:"selector,omitempty" yaml:"selector,omitempty"`
  ServiceAccountName: string                 `json:"serviceAccountName,omitempty" yaml:"serviceAccountName,omitempty"`
  ShareProcessNamespace: *bool                  `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty"`
  State: string                 `json:"state,omitempty" yaml:"state,omitempty"`
  Subdomain: string                 `json:"subdomain,omitempty" yaml:"subdomain,omitempty"`
  Sysctls: []Sysctl               `json:"sysctls,omitempty" yaml:"sysctls,omitempty"`
  TTLSecondsAfterFinished: *int64                 `json:"ttlSecondsAfterFinished,omitempty" yaml:"ttlSecondsAfterFinished,omitempty"`
  TerminationGracePeriodSeconds: *int64                 `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty"`
  Transitioning: string                 `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
  TransitioningMessage: string                 `json:"transitioningMessage,omitempty" yaml:"transitioningMessage,omitempty"`
  UUID: string                 `json:"uuid,omitempty" yaml:"uuid,omitempty"`
  Uid: *int64                 `json:"uid,omitempty" yaml:"uid,omitempty"`
  Volumes: []Volume               `json:"volumes,omitempty" yaml:"volumes,omitempty"`
  WorkloadAnnotations: map[string]string      `json:"workloadAnnotations,omitempty" yaml:"workloadAnnotations,omitempty"`
  WorkloadLabels: map[string]string      `json:"workloadLabels,omitempty" yaml:"workloadLabels,omitempty"`
  WorkloadMetrics: []WorkloadMetric       `json:"workloadMetrics,omitempty" yaml:"workloadMetrics,omitempty"`
